// This is your Prisma schema file
// Complete schema with all features: Projects, Documents, Folders, Members, Permissions, Chat, Invitations

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USER MODEL
// ============================================
model User {
  id        String   @id @default(cuid())
  googleId  String   @unique
  email     String   @unique
  name      String
  avatar    String?
  role      UserRole @default(EDITOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  chatMessages        ChatMessage[]
  sentInvitations     ProjectInvitation[]  @relation("SentInvitations")
  projectMembers      ProjectMember[]
  ownedProjects       Project[]            @relation("ProjectOwner")
  sessions            Session[]
  folderPermissions   FolderPermission[] // Folder-level permissions
  documentPermissions DocumentPermission[]

  @@map("users")
}

// ============================================
// PROJECT MODEL
// ============================================
model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean  @default(false)
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner        User                @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  chatMessages ChatMessage[]
  documents    Document[]
  folders      Folder[]
  invitations  ProjectInvitation[]
  members      ProjectMember[]

  @@map("projects")
}

// ============================================
// PROJECT MEMBER MODEL (Role-based access)
// ============================================
model ProjectMember {
  id        String      @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole @default(EDITOR)
  joinedAt  DateTime    @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

// ============================================
// FOLDER MODEL
// ============================================
model Folder {
  id        String   @id @default(cuid())
  name      String
  projectId String
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project     Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  parent      Folder?            @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Folder[]           @relation("FolderHierarchy")
  documents   Document[]
  permissions FolderPermission[] // Folder-level permissions

  @@map("folders")
}

// ============================================
// FOLDER PERMISSION MODEL (Granular access)
// ============================================
model FolderPermission {
  id        String   @id @default(cuid())
  folderId  String
  userId    String
  canEdit   Boolean  @default(false)
  canDelete Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  folder Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([folderId, userId])
  @@map("folder_permissions")
}

// ============================================
// DOCUMENT MODEL
// ============================================
model Document {
  id        String   @id @default(cuid())
  projectId String
  name      String
  language  String   @default("javascript")
  content   String   @default("")
  folderId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project     Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  folder      Folder?              @relation(fields: [folderId], references: [id], onDelete: Cascade)
  permissions DocumentPermission[] // Document-level permissions

  @@map("documents")
}

// ============================================
// DOCUMENT PERMISSION MODEL (File-level access)
// ============================================
model DocumentPermission {
  id         String   @id @default(cuid())
  documentId String
  userId     String
  canEdit    Boolean  @default(false)
  canDelete  Boolean  @default(false)
  createdAt  DateTime @default(now())

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([documentId, userId])
  @@map("document_permissions")
}

// ============================================
// SESSION MODEL (Authentication)
// ============================================
model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// ============================================
// PROJECT INVITATION MODEL
// ============================================
model ProjectInvitation {
  id        String           @id @default(cuid())
  projectId String
  email     String
  role      ProjectRole      @default(EDITOR)
  invitedBy String
  status    InvitationStatus @default(PENDING)
  token     String           @unique
  expiresAt DateTime
  createdAt DateTime         @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  inviter User    @relation("SentInvitations", fields: [invitedBy], references: [id], onDelete: Cascade)

  @@unique([projectId, email])
  @@map("project_invitations")
}

// ============================================
// CHAT MESSAGE MODEL
// ============================================
model ChatMessage {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  message   String
  readBy    String[] @default([])
  createdAt DateTime @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

// ============================================
// ENUMS
// ============================================

// User role (deprecated, kept for backward compatibility)
enum UserRole {
  ADMIN
  EDITOR
  VIEWER
  GUEST
}

// Project member role (used for project-level permissions)
enum ProjectRole {
  ADMIN // Can manage members, full access
  EDITOR // Can edit all files (unless restricted by folder permissions)
  VIEWER // Read-only access (unless granted folder permissions)
}

// Invitation status
enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}
