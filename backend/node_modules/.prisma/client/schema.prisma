generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String              @id @default(cuid())
  googleId        String              @unique
  email           String              @unique
  name            String
  avatar          String?
  role            UserRole            @default(EDITOR)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  chatMessages    ChatMessage[]
  sentInvitations ProjectInvitation[] @relation("SentInvitations")
  projectMembers  ProjectMember[]
  ownedProjects   Project[]           @relation("ProjectOwner")
  ownedFolders    Folder[]
  ownedDocuments  Document[]
  sessions        Session[]

  @@map("users")
}

model Project {
  id           String              @id @default(cuid())
  name         String
  description  String?
  isPublic     Boolean             @default(false)
  ownerId      String
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  chatMessages ChatMessage[]
  documents    Document[]
  folders      Folder[]
  invitations  ProjectInvitation[]
  members      ProjectMember[]
  owner        User                @relation("ProjectOwner", fields: [ownerId], references: [id])

  @@map("projects")
}

model ProjectMember {
  id        String      @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole @default(EDITOR)
  joinedAt  DateTime    @default(now())
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

model Document {
  id        String   @id @default(cuid())
  projectId String
  name      String
  language  String   @default("javascript")
  content   String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  folderId  String?
  ownerId   String?
  folder    Folder?  @relation(fields: [folderId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  owner     User?    @relation(fields: [ownerId], references: [id])

  @@map("documents")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model ProjectInvitation {
  id        String           @id @default(cuid())
  projectId String
  email     String
  role      ProjectRole      @default(EDITOR)
  invitedBy String
  status    InvitationStatus @default(PENDING)
  token     String           @unique
  expiresAt DateTime
  createdAt DateTime         @default(now())
  inviter   User             @relation("SentInvitations", fields: [invitedBy], references: [id])
  project   Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, email])
  @@map("project_invitations")
}

model ChatMessage {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  message   String
  createdAt DateTime @default(now())
  readBy    String[] @default([])
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model Folder {
  id        String     @id @default(cuid())
  name      String
  projectId String
  parentId  String?
  ownerId   String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  documents Document[]
  parent    Folder?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children  Folder[]   @relation("FolderHierarchy")
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  owner     User?      @relation(fields: [ownerId], references: [id])

  @@map("folders")
}

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
  GUEST
}

enum ProjectRole {
  ADMIN
  EDITOR
  VIEWER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}
